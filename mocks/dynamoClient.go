// Code generated by MockGen. DO NOT EDIT.
// Source: stori-account-summary/db (interfaces: DynamoClient)
//
// Generated by this command:
//
//	mockgen -package=mocks stori-account-summary/db DynamoClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "go.uber.org/mock/gomock"
)

// MockDynamoClient is a mock of DynamoClient interface.
type MockDynamoClient struct {
	ctrl     *gomock.Controller
	recorder *MockDynamoClientMockRecorder
	isgomock struct{}
}

// MockDynamoClientMockRecorder is the mock recorder for MockDynamoClient.
type MockDynamoClientMockRecorder struct {
	mock *MockDynamoClient
}

// NewMockDynamoClient creates a new mock instance.
func NewMockDynamoClient(ctrl *gomock.Controller) *MockDynamoClient {
	mock := &MockDynamoClient{ctrl: ctrl}
	mock.recorder = &MockDynamoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDynamoClient) EXPECT() *MockDynamoClientMockRecorder {
	return m.recorder
}

// TransactWriteItems mocks base method.
func (m *MockDynamoClient) TransactWriteItems(ctx context.Context, params *dynamodb.TransactWriteItemsInput, optFns ...func(*dynamodb.Options)) (*dynamodb.TransactWriteItemsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TransactWriteItems", varargs...)
	ret0, _ := ret[0].(*dynamodb.TransactWriteItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransactWriteItems indicates an expected call of TransactWriteItems.
func (mr *MockDynamoClientMockRecorder) TransactWriteItems(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactWriteItems", reflect.TypeOf((*MockDynamoClient)(nil).TransactWriteItems), varargs...)
}
