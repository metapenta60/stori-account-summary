// Code generated by MockGen. DO NOT EDIT.
// Source: stori-account-summary/services/send-email (interfaces: SendGridClient)
//
// Generated by this command:
//
//	mockgen stori-account-summary/services/send-email SendGridClient
//

// Package mock_sendemail is a generated GoMock package.
package mock_sendemail

import (
	reflect "reflect"
	model "stori-account-summary/model"

	gomock "go.uber.org/mock/gomock"
)

// MockSendGridClient is a mock of SendGridClient interface.
type MockSendGridClient struct {
	ctrl     *gomock.Controller
	recorder *MockSendGridClientMockRecorder
	isgomock struct{}
}

// MockSendGridClientMockRecorder is the mock recorder for MockSendGridClient.
type MockSendGridClientMockRecorder struct {
	mock *MockSendGridClient
}

// NewMockSendGridClient creates a new mock instance.
func NewMockSendGridClient(ctrl *gomock.Controller) *MockSendGridClient {
	mock := &MockSendGridClient{ctrl: ctrl}
	mock.recorder = &MockSendGridClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendGridClient) EXPECT() *MockSendGridClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSendGridClient) Send(ec model.EmailPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSendGridClientMockRecorder) Send(ec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSendGridClient)(nil).Send), ec)
}
